"use strict";

let openPositions = { left: true, straight: false, right: true }
const wMargin = 25;
let slope = 1
let ctx, width, height


function render(_ctx, _width, _height) {
    ctx = _ctx
    width = _width
    height = _height
    slope = (height/2)/(width/2 - 200 - wMargin)

    renderBottomTriangle()
    renderWalls()
} 

function renderBottomTriangle() {
    
    const grad = ctx.createLinearGradient(width, height, width, height/2)
    grad.addColorStop(0, "rgb(200 200 200)")
    grad.addColorStop(0.7, "rgb(50 50 50)")
    grad.addColorStop(1, "black")
    ctx.fillStyle = grad
    ctx.beginPath();
    ctx.moveTo(width - 200, height);
    ctx.lineTo(width/2 + wMargin, height/2);
    ctx.lineTo(width/2 - wMargin, height/2);
    ctx.lineTo(200, height);
    ctx.lineTo(width - 200, height);
    ctx.fill();
}

function renderWalls() {
    renderRightWall()
    renderLeftWall()

    const heightConstant = (width - 200) - (width/2 + 200)
    const topY = height/4
    const bottomY = (height - (heightConstant * slope))
    const middleY = (bottomY - topY)/2 + topY

    // back wall
    ctx.fillStyle = "rgb(50 50 50)"
    ctx.fillRect(width/2 - 200, 0, 400, height - (heightConstant * slope))

        // middle rect
    if(!openPositions.straight) {
        ctx.fillStyle = 'rgb(0 0 0)'
        ctx.fillRect(width/2 - 100, topY, 200, bottomY - topY)

        //right inner door wall
        let rightGrad = ctx.createLinearGradient(width/2 + 100, middleY, width/2 + 50, middleY)
        rightGrad.addColorStop(0, 'rgb(45 45 45)')
        rightGrad.addColorStop(0.5, 'rgb(30 30 30)')
        rightGrad.addColorStop(1, 'rgb(0 0 0)')
        ctx.fillStyle = rightGrad
        ctx.beginPath()
        ctx.moveTo(width/2 + 100, bottomY)
        ctx.lineTo(width/2 + 50, bottomY - 50)
        ctx.lineTo(width/2 + 50, (height/4) + 50)
        ctx.lineTo(width/2 + 100, height/4)
        ctx.lineTo(width/2 + 100, bottomY)
        ctx.fill()
        //left inner door wall
        let leftGrad = ctx.createLinearGradient(width/2 - 100, middleY, width/2 - 50, middleY)
        leftGrad.addColorStop(0, 'rgb(45 45 45)')
        leftGrad.addColorStop(0.5, 'rgb(30 30 30)')
        leftGrad.addColorStop(1, 'rgb(0 0 0)')
        ctx.fillStyle = leftGrad
        ctx.beginPath()
        ctx.moveTo(width/2 - 100, bottomY)
        ctx.lineTo(width/2 - 50, bottomY - 50)
        ctx.lineTo(width/2 - 50, topY + 50)
        ctx.lineTo(width/2 - 100, topY)
        ctx.lineTo(width/2 - 100, bottomY)
        ctx.fill()
        //door ceiling
        let ceilingGrad = ctx.createLinearGradient(width/2, topY, width/2, topY + 50)
        ceilingGrad.addColorStop(0, 'rgb(45 45 45)')
        ceilingGrad.addColorStop(0.5, 'rgb(30 30 30)')
        ceilingGrad.addColorStop(1, 'rgb(0 0 0)')
        ctx.fillStyle = ceilingGrad
        ctx.beginPath()
        ctx.moveTo(width/2 - 100, topY)
        ctx.lineTo(width/2 - 50, topY + 50)
        ctx.lineTo(width/2 + 50, topY + 50)
        ctx.lineTo(width/2 + 100, topY)
        ctx.lineTo(width/2 - 100, topY)
        ctx.fill()
        //floor
        let floorGrad = ctx.createLinearGradient(width/2, bottomY, width/2, bottomY - 50)
        floorGrad.addColorStop(0, 'rgb(45 45 45)')
        floorGrad.addColorStop(0.5, 'rgb(30 30 30)')
        floorGrad.addColorStop(1, 'rgb(0 0 0)')
        ctx.fillStyle = floorGrad
        ctx.beginPath()
        ctx.moveTo(width/2 - 100, bottomY)
        ctx.lineTo(width/2 + 100, bottomY)
        ctx.lineTo(width/2 + 50, bottomY - 50)
        ctx.lineTo(width/2 - 50, bottomY - 50)
        ctx.lineTo(width/2 - 100, bottomY)
        ctx.fill()
    }
}

function renderRightWall() {
    const gradRight = ctx.createLinearGradient(width, height/2, width/2 + 25, height/2)
    gradRight.addColorStop(0, "rgb(100 100 100)")
    gradRight.addColorStop(0.75, "rgb(50 50 50)")
    gradRight.addColorStop(1, "black")
    ctx.fillStyle = gradRight
    ctx.beginPath();
    ctx.moveTo(width/2 + wMargin, height/2);
    ctx.lineTo(width/2 + wMargin, 0)
    ctx.lineTo(width, 0)
    ctx.lineTo(width, height)
    ctx.lineTo(width -200, height);
    ctx.lineTo(width/2 + wMargin, height/2);
    ctx.fill();

    if(openPositions.right) {
        const tWidth = width/2 - 200 - wMargin
        const tHeight = height/2
        const slope = tHeight/tWidth
        const originX = width - 200
        const backgroundGrad = ctx.createLinearGradient(originX - 400, (height / 1.5), originX - 200, (height / 1.5))
        backgroundGrad.addColorStop(0, "rgb(50 50 50)")
        backgroundGrad.addColorStop(1, 'rgb(0, 0, 0)')
        ctx.fillStyle = backgroundGrad
        ctx.beginPath();
        ctx.moveTo(originX - 200, height - (200 * slope))
        ctx.lineTo(originX - 200, height/4 - 20)
        ctx.lineTo(originX - 400, (height/4))
        ctx.lineTo(originX - 400, (height - (400*slope)))
        ctx.lineTo(originX - 200, height - (200 * slope))
        ctx.fill()
        const doorGrad = ctx.createLinearGradient(originX - 400, (height / 1.5), originX - 200, (height / 1.5))
        doorGrad.addColorStop(0, "rgb(60, 60, 60)")
        doorGrad.addColorStop(1, "rgb(0, 0, 0)")
        ctx.fillStyle = doorGrad
        ctx.beginPath()
        ctx.moveTo(originX - 400, (height - (400*slope)))
        ctx.lineTo(originX - 200, (height / 1.5))
        ctx.lineTo(originX - 200, height/4 + 10)
        ctx.lineTo(originX - 400, (height/4))
        ctx.lineTo(originX - 400, (height - (400*slope)))
        ctx.fill()

        //floor fragment
        const floorGrad = ctx.createLinearGradient(originX - 250, height - (250 * slope), originX - 225, height/1.5)
        floorGrad.addColorStop(0, 'rgb(75 75 75')
        floorGrad.addColorStop(1, 'rgb(0 0 0')
        ctx.fillStyle = floorGrad
        ctx.beginPath()
        ctx.moveTo(originX - 200, height - (200 * slope))
        ctx.lineTo(originX - 200, (height / 1.5))
        ctx.lineTo(originX - 400, (height - (400*slope)))
        ctx.lineTo(originX - 200, height - (200 * slope))
        ctx.fill()
    }
}

function renderLeftWall() {
    const gradLeft = ctx.createLinearGradient(0, height/2, width/2 - wMargin, height/2)
    gradLeft.addColorStop(0, "rgb(100 100 100)")
    gradLeft.addColorStop(0.75, "rgb(50 50 50)")
    gradLeft.addColorStop(1, "black")
    ctx.fillStyle = gradLeft
    ctx.beginPath();
    ctx.moveTo(width/2 - wMargin, height/2);
    ctx.lineTo(width/2 - wMargin, 0)
    ctx.lineTo(0, 0)
    ctx.lineTo(0, height)
    ctx.lineTo(200, height);
    ctx.lineTo(width/2 - wMargin, height/2);
    ctx.fill();

    if(openPositions.left) {
        const tWidth = width/2 - 200 - wMargin
        const tHeight = height/2
        const slope = tHeight/tWidth
        const originX = 200
        const backgroundGrad = ctx.createLinearGradient(originX + 400, (height / 1.5), originX + 200, (height / 1.5))
        backgroundGrad.addColorStop(0, "rgb(50 50 50)")
        backgroundGrad.addColorStop(1, 'rgb(0, 0, 0)')
        ctx.fillStyle = backgroundGrad
        ctx.beginPath();
        ctx.moveTo(originX + 200, height - (200 * slope))
        ctx.lineTo(originX + 200, height/4 - 20)
        ctx.lineTo(originX + 400, (height/4))
        ctx.lineTo(originX + 400, (height - (400*slope)))
        ctx.lineTo(originX + 200, height - (200 * slope))
        ctx.fill()
        const doorGrad = ctx.createLinearGradient(originX + 400, (height / 1.5), originX + 200, (height / 1.5))
        doorGrad.addColorStop(0, "rgb(60, 60, 60)")
        doorGrad.addColorStop(1, "rgb(0, 0, 0)")
        ctx.fillStyle = doorGrad
        ctx.beginPath()
        ctx.moveTo(originX + 400, (height - (400*slope)))
        ctx.lineTo(originX + 200, (height / 1.5))
        ctx.lineTo(originX + 200, height/4 + 10)
        ctx.lineTo(originX + 400, (height/4))
        ctx.lineTo(originX + 400, (height - (400*slope)))
        ctx.fill()

        //floor fragment
        const floorGrad = ctx.createLinearGradient(originX + 250, height - (250 * slope), originX + 225, height/1.5)
        floorGrad.addColorStop(0, 'rgb(75 75 75')
        floorGrad.addColorStop(1, 'rgb(0 0 0')
        ctx.fillStyle = floorGrad
        ctx.beginPath()
        ctx.moveTo(originX + 200, height - (200 * slope))
        ctx.lineTo(originX + 200, (height / 1.5))
        ctx.lineTo(originX + 400, (height - (400*slope)))
        ctx.lineTo(originX + 200, height - (200 * slope))
        ctx.fill()
    }
}