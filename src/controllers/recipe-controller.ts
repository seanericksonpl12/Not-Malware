import * as express from "express"
import { RSRequest, RSRequestParams } from "../models/rs/rs-request";
import { Controller } from "./controller";
import { HttpError } from "../models/http-error";
import { APP_ERROR_MESSAGE, HttpStatusCode } from "../constants/constants";

export class RecipeController extends Controller {

    constructor() {
        super()
        this.router.get("/pageSearch", this.pageSearch);
    }

    async pageSearch(req: express.Request, res: express.Response, next: express.NextFunction) {
        try {
            const index = req.query["index"] as string || "0"
            const search = req.query["search"] as string
            const request = new RSRequest(new RSRequestParams(search, index))
            super.get(request, next, (status, body) => {
                const error = body["error"]
                if(error) {
                    const status = error["code"] || 500
                    const errorMessage = error["status"] || APP_ERROR_MESSAGE.serverErrorType
                    const message = error["message"] || APP_ERROR_MESSAGE.serverError
                    const httpError = new HttpError(status, errorMessage, message, error)
                    next(httpError)
                    return
                } else {
                    res.status(status).json(body)
                }
            })
        } catch(error) {
            console.log("internal error!")
            console.log(error)
            next(error);
        }
    }

    handleError(error: any, next: express.NextFunction) {
        console.log("handling error")
        const status = error["code"] || 500
        const errorMessage = error["status"] || APP_ERROR_MESSAGE.serverErrorType
        const message = error["message"] || APP_ERROR_MESSAGE.serverError
        const httpError = new HttpError(status, errorMessage, message, error)
        next(httpError)
    }

    validateParams(req: express.Request, next: express.NextFunction): Boolean {
        const index = req.query["index"] as string || undefined
        if (isNaN(Number(index)) || index === undefined || Number(index) === undefined) {
            const error = new HttpError(HttpStatusCode.BAD_REQUEST, "INVALID URL", "Invalid index parameter.")
            next(error)
            return false
        }

        return true
    }
}